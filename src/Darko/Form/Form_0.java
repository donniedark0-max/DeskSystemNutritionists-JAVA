/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Darko.Form;

import Connection.Database;
import Darko.Model.ModelDates;
import Darko.Model.ModelPatient;
import Darko.Model.ModelUser;
import Service.ServiceDates;
import Service.ServicePatient;
import com.formdev.flatlaf.fonts.inter.FlatInterFont;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.UIManager;

/**
 *
 * @author jjose
 */
public class Form_0 extends javax.swing.JPanel {
    private final ModelUser user;
    private  ModelDates dat;
//    private final ServicePatient serviceP;
    /**
     * Creates new form Form_0
     */
    
    private ModelPatient patient;
    private ServiceDates ServiceD;
    
    
    public ModelPatient getPatient(){
        return patient;
    }
    public Form_0(ModelUser user, ActionListener eventRegister) throws FontFormatException, IOException {
        initComponents();
        this.user = user;
        
         initRegisterDate(eventRegister, patient);
        FlatInterFont.install();
        
        UIManager.put("defaultFont", new Font( FlatInterFont.FAMILY, Font.PLAIN, 12 ));
        jLabel1.setFont(new Font(FlatInterFont.FAMILY, Font.BOLD, 45 ));
        jLabel2.setFont(new Font(FlatInterFont.FAMILY, Font.BOLD, 17 ));
        jLabel2.setForeground(new Color(79,79,79));
        jLabel5.setFont(new Font(FlatInterFont.FAMILY, Font.BOLD, 30 ));
        jLabel5.setForeground(new Color(79,79,79));
        jLabel6.setFont(new Font(FlatInterFont.FAMILY, Font.BOLD, 30 ));
        jLabel6.setForeground(new Color(79,79,79));
        jLabel6.setText(user.getUsername()+".");
        jLabel7.setFont(new Font(FlatInterFont.FAMILY, Font.PLAIN, 12 ));
        jLabel8.setFont(new Font(FlatInterFont.FAMILY, Font.BOLD, 13 ));
        jLabel9.setFont(new Font(FlatInterFont.FAMILY, Font.PLAIN, 12 ));
        jLabel10.setFont(new Font(FlatInterFont.FAMILY, Font.PLAIN, 12 ));
        jlblprox.setFont(new Font(FlatInterFont.FAMILY, Font.BOLD, 13 ));
        jlblProxCita.setFont(new Font(FlatInterFont.FAMILY, Font.PLAIN, 12 ));
        jlblProxCita.setForeground(new Color(245,106,90));
        jlblProxCita1.setFont(new Font(FlatInterFont.FAMILY, Font.PLAIN, 12 ));
        jlblProxCita1.setForeground(new Color(245,106,90));
        mostrarProximasCitas(jlblprox);
        Font customFont1 = Font.createFont(Font.TRUETYPE_FONT, new File("C:\\Users\\jjose\\OneDrive\\Escritorio\\fonts\\Amphora-Regular.otf"));
        customFont1 = customFont1.deriveFont(Font.BOLD,15);
        btnGuardarCita.setFont(customFont1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        date = new Darko.datechooser.DateChooser();
        jLabel1 = new javax.swing.JLabel();
        txtDate = new textfield_suggestion.TextFieldSuggestion();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnGuardarCita = new Darko.Swing.Button();
        txtDni = new textfield.TextFieldDNI();
        jlblprox = new javax.swing.JLabel();
        jlblProxCita = new javax.swing.JLabel();
        jlblProxCita1 = new javax.swing.JLabel();

        date.setForeground(new java.awt.Color(102, 153, 0));
        date.setTextRefernce(txtDate);

        setBackground(new java.awt.Color(250, 250, 250));

        jLabel1.setText("Citas");

        txtDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDate.setSelectionColor(new java.awt.Color(51, 153, 0));

        jLabel2.setText("Selecciona una fecha para la cita ");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Darko/Img/adrien-olichon-u34JNBOIQ10-unsplash.jpg"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Darko/Img/calendar.png"))); // NOI18N

        jLabel5.setText("Hola");

        jLabel6.setText("user");

        jLabel7.setText("En tu viaje hacia una mejor salud, cada elección cuenta.");

        jLabel8.setText("Juntos,");

        jLabel9.setText("para lograr tus objetivos nutricionales y construir un futuro más saludable.");

        jLabel10.setText("trabajaremos");

        btnGuardarCita.setBackground(new java.awt.Color(7, 164, 121));
        btnGuardarCita.setForeground(new java.awt.Color(250, 250, 250));
        btnGuardarCita.setText("Guardar Cita");
        btnGuardarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCitaActionPerformed(evt);
            }
        });

        txtDni.setLabelText("DNI del paciente");
        txtDni.setLineColor(new java.awt.Color(51, 153, 0));
        txtDni.setSelectionColor(new java.awt.Color(102, 204, 0));

        jlblprox.setText("PROXIMAS CITAS:");

        jlblProxCita.setText("PROXIMA CITA:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(472, 472, 472)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(txtDni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(311, 311, 311)
                        .addComponent(btnGuardarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlblProxCita1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 528, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlblprox)
                                    .addComponent(jlblProxCita))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel8)
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel10)))
                                .addGap(84, 84, 84))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnGuardarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addGap(51, 51, 51))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel6)
                                .addGap(44, 44, 44)))
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jlblprox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblProxCita)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblProxCita1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCitaActionPerformed

        ModelPatient patient = this.getPatient();
         try {
            insertDate( dat);
            mostrarProximasCitas(jlblprox);
         } catch (SQLException ex) {
             Logger.getLogger(Form_6.class.getName()).log(Level.SEVERE, null, ex);
         }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGuardarCitaActionPerformed

    
    
    private void initRegisterDate(ActionListener eventRegister, ModelPatient patient){
        
        btnGuardarCita.addActionListener(eventRegister);
        
        btnGuardarCita.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                
                String dateString = txtDate.getText().trim(); // Supongo que obtienes la fecha desde algún campo de texto
               String dniString = txtDni.getText().trim();
                int patient_id = Integer.parseInt(dniString);
                try {
                    // Define el formato de fecha que coincide con tu cadena
                    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

                    // Parsea la cadena a un objeto Date
                    java.util.Date date = sdf.parse(dateString);

                    // Convierte el objeto Date a java.sql.Date
                    java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                    
                    
                    dat = new ModelDates(0, patient_id, sqlDate, true); // Convierte sqlDate a String si es necesario
                    System.out.println(sqlDate);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }
                
            
            }
        });
    }
    
    
    public void insertDate(ModelDates date) throws SQLException{
        try {
            int patientId = date.getPatient_id(); // Asegúrate de que patientId se obtenga de manera correcta
            Connection con = Database.getInstance().getConnection();
//         
            // Verifica si el paciente con el ID existe en la tabla "patients"
             if (!patientExists(con, patientId )) {
            // Si no existe, muestra un mensaje de error
            System.out.println("Error: El paciente con ID " + patientId + " no existe en la tabla patients.");
            return; // Ahora está dentro de un método válido
             }
        
       PreparedStatement p = con.prepareStatement("INSERT INTO dates (patient_id, date, state) VALUES (?,?,?)");
       p.setInt(1, date.getPatient_id());
       p.setDate(2, date.getDate());
       p.setBoolean(3, date.isState());
       p.execute();
       ResultSet r = p.executeQuery();
       r.close();
       p.close();
      } catch (SQLException e) {
            System.out.println("ERROR INSERT DATE");
          System.out.println(e.getLocalizedMessage());
        }
    }
    private boolean patientExists(Connection con, int patient_id) throws SQLException {
        
         String dniString = txtDni.getText().trim();
         patient_id = Integer.parseInt(dniString);
         
    PreparedStatement existsQuery = con.prepareStatement("SELECT COUNT(*) FROM patients WHERE patient_id = ?");
    existsQuery.setInt(1, patient_id);
    ResultSet result = existsQuery.executeQuery();

    if (result.next()) {
        int count = result.getInt(1);
        return count > 0; // Si count > 0, significa que el paciente con el DNI existe
    }

    return false; // Si no se encuentra ningún paciente con el DNI
}
    
    
    private void mostrarProximasCitas(JLabel jLabel) {
       Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

   try {
        con = Database.getInstance().getConnection();

        // Obtén la fecha actual
        Date fechaActual = new Date();

        // Define un formato para mostrar las fechas en el formato deseado
        SimpleDateFormat formatoFecha = new SimpleDateFormat("EEEE d 'de' MMMM 'de' yyyy");

        // Consulta SQL para obtener las dos citas más cercanas con patient_id
        String consulta = "SELECT D.date, D.patient_id, P.first_name, P.last_name " +
                          "FROM dates D " +
                          "INNER JOIN patients P ON D.patient_id = P.patient_id " +
                          "WHERE D.date >= ? " +
                          "ORDER BY ABS(DATEDIFF(D.date, ?)) " +
                          "LIMIT 2";

        stmt = con.prepareStatement(consulta);
        stmt.setDate(1, new java.sql.Date(fechaActual.getTime()));
        stmt.setDate(2, new java.sql.Date(fechaActual.getTime()));

        rs = stmt.executeQuery();

        // Variables para almacenar las dos fechas (inicialmente nulas)
        Date fecha1 = null;
        Date fecha2 = null;
        String nombrePaciente1 = null;
        String nombrePaciente2 = null;

        int i = 0; // Variable para controlar el número de resultados obtenidos

        while (rs.next() && i < 2) {
            Date fechaCita = rs.getDate("date");
            int patientId = rs.getInt("patient_id");
            String nombrePaciente = rs.getString("first_name") + " " + rs.getString("last_name");

            // Muestra las fechas y nombres de pacientes válidos en los JLabel, si existen
            if (i == 0) {
                fecha1 = fechaCita;
                nombrePaciente1 = nombrePaciente;
                i++;
            } else if (i == 1) {
                fecha2 = fechaCita;
                nombrePaciente2 = nombrePaciente;
                i++;
            }
        }

        if (fecha1 != null) {
            jlblProxCita.setText("Fecha 1: " + formatoFecha.format(fecha1) + " - Paciente: " + nombrePaciente1);
            jlblProxCita.setVisible(true);
        }

        if (fecha2 != null) {
            jlblProxCita1.setText("Fecha 2: " + formatoFecha.format(fecha2) + " - Paciente: " + nombrePaciente2);
            jlblProxCita1.setVisible(true);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Darko.Swing.Button btnGuardarCita;
    private Darko.datechooser.DateChooser date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel jlblProxCita;
    private javax.swing.JLabel jlblProxCita1;
    private javax.swing.JLabel jlblprox;
    private textfield_suggestion.TextFieldSuggestion txtDate;
    private textfield.TextFieldDNI txtDni;
    // End of variables declaration//GEN-END:variables
}
